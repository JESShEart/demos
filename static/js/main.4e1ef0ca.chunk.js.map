{"version":3,"sources":["react/person/person-form.component.js","react/debt/debt-form.component.js","redux/person/person.constants.js","redux/person/person.reducer.js","redux/debt/debt.constants.js","redux/debt/debt-client.reducer.js","redux/debt/debt.reducer.js","redux/index.reducer.js","react/debug/print-state.component.js","redux/person/person.actions.js","react/debug/print-state.container.js","react/person/person-form.container.js","react/person/borrower-check.component.js","react/person/person-table-row.component.js","react/person/person-table.component.js","react/person/person-table.container.js","redux/debt/debt.actions.js","react/debt/debt-form.container.js","react/debt/is-consolidated-check.component.js","react/debt/is-new-debt-check.component.js","react/debt/is-client-check.component.js","react/debt/debt-table-row.component.js","react/debt/debt-table.component.js","react/debt/debt-table.container.js","react/tabs.component.js","react/tabs.container.js","react/App.js","load-test-data.js","index.js"],"names":["name","annualIncome","isBorrower","formRef","debtType","totalValue","amountOwed","monthlyPayment","remainingTermMonths","interestRate","isConsolidated","isNewDebt","clients","PersonEvents","personReducer","state","arguments","length","undefined","action","type","Object","toConsumableArray","concat","payload","filter","person","id","map","personBorrower","assign","DebtEvents","DebtTypes","AUTO","HOME","INVESTMENT","INVESTMENT_PROPERTY","UNSECURED","OTHER","debtClientReducer","debtClient","isClient","c","personId","debtReducer","debt","debtConsolidated","debtIsNew","debtId","combineReducers","personList","debtList","PrintState","_ref","react_default","a","createElement","className","onClick","console","log","nextPersonId","connect","dispatch","addPerson","PersonFormComponent","onAddPerson","ref","el","onSubmit","e","preventDefault","value","trim","checked","reset","focus","htmlFor","autoComplete","required","node","defaultChecked","BorrowerCheckComponent","updatePersonBorrower","onChange","event","target","PersonTableRowComponent","onDelete","number_format_default","displayType","thousandSeparator","prefix","borrower_check_component","PersonTable","deletePerson","person_table_row_component","key","ownProps","nextDebt","addDebt","DebtFormComponent","keys","min","step","ConsolidatedCheckComponent","updateIsConsolidated","NewDebtCheckComponent","updateIsNewDebt","ClientCheckComponent","updateClient","indexOf","DebtTableRowComponent","is_consolidated_check_component","is_new_debt_check_component","is_client_check_component","DebtTableComponent","deleteDebt","debt_table_row_component","updateIsConcolidated","TabsComponent","role","data-toggle","href","aria-controls","aria-selected","getDisabled","aria-labelledby","person_form_container","person_table_container","debt_form_container","debt_table_container","App","tabs_container","loadData","store","createStore","rootReducer","render","es","react_App","document","getElementById"],"mappings":"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","file":"static/js/main.4e1ef0ca.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nlet name, annualIncome, isBorrower, formRef;\n\nconst PersonFormComponent = ({ onAddPerson }) => (\n  <div>\n    <form ref={(el) => (formRef = el)}\n          onSubmit={e => {\n            e.preventDefault();\n\n            if (!name.value.trim() || !+annualIncome.value.trim()) {\n              return\n            }\n\n            onAddPerson({\n              name: name.value,\n              annualIncome: +annualIncome.value,\n              isBorrower: isBorrower.checked\n            });\n\n            name.value = '';\n            formRef.reset();\n            name.focus();\n          }}\n    >\n      <div className=\"row\">\n        <div className=\"col\">\n          <label htmlFor=\"name\">Name</label>\n          <input id=\"name\"\n                 className=\"form-control\"\n                 autoComplete='off'\n                 required={true}\n                 ref={node => (name = node)} />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"annualIncome\">Annual Income</label>\n          <input id=\"annualIncome\"\n                 className=\"form-control\"\n                 autoComplete='off'\n                 required={true}\n                 ref={node => (annualIncome = node)}\n                 type='number' />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <input id=\"isBorrower\"\n                 ref={node => (isBorrower = node)}\n                 defaultChecked={true}\n                 type='checkbox'/>\n          <label htmlFor=\"isBorrower\" className=\"pl-2\">Is Borrower</label>\n        </div>\n      </div>\n      <button className=\"btn btn-primary\" type=\"submit\">Add Person</button>\n    </form>\n  </div>\n)\n\nPersonFormComponent.propTypes = {\n  onAddPerson: PropTypes.func.isRequired\n}\n\nexport default PersonFormComponent","import React from \"react\";\nimport PropTypes from 'prop-types'\nimport {DebtTypes} from \"../../redux/debt/debt.constants\";\n\nlet formRef, debtType, totalValue, amountOwed, monthlyPayment, remainingTermMonths, interestRate, isConsolidated, isNewDebt, clients;\nclients = [];\n\nconst DebtFormComponent = ({ personList, addDebt }) => (\n    <form ref={(el) => (formRef = el)}\n          onSubmit={e => {\n            e.preventDefault();\n\n            if (!debtType.value\n                || !+totalValue.value.trim()\n                || !+amountOwed.value.trim()\n                || !+monthlyPayment.value.trim()\n                || !+interestRate.value.trim()\n                || !+remainingTermMonths.value.trim()\n                || !+interestRate.value.trim()) {\n              return\n            }\n\n            addDebt({\n              debtType: debtType.value,\n              totalValue: +totalValue.value.trim(),\n              amountOwed: +amountOwed.value.trim(),\n              monthlyPayment: +monthlyPayment.value.trim(),\n              remainingTermMonths: +remainingTermMonths.value.trim(),\n              interestRate: +interestRate.value.trim(),\n              isConsolidated: isConsolidated.checked,\n              isNewDebt: isNewDebt.checked,\n              clients: clients.filter(c => c.node.checked).map(c => c.id)\n            });\n\n            formRef.reset();\n            debtType.focus();\n          }}>\n      <div className=\"row\">\n        <div className=\"col\">\n          <label htmlFor=\"type\">Type</label>\n          <select id=\"type\"\n                  className=\"form-control\"\n                  ref={node => (debtType = node)}>\n            {Object.keys(DebtTypes).map(debtType =>\n              <option key={DebtTypes[debtType]} value={DebtTypes[debtType]}>{DebtTypes[debtType]}</option>\n            )}\n          </select>\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"totalValue\"\n                 className=\"text-nowrap\" >Total Value</label>\n          <input id=\"totalValue\"\n                 type=\"number\"\n                 className=\"form-control\"\n                 min={0}\n                 step={0.01}\n                 ref={node => (totalValue = node)}\n                 required />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"amountOwed\"\n                 className=\"text-nowrap\" >Amount Owed</label>\n          <input id=\"amountOwed\"\n                 type=\"number\"\n                 className=\"form-control\"\n                 min={0}\n                 step={0.01}\n                 ref={node => (amountOwed = node)}\n                 required />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"monthlyPayment\"\n                 className=\"text-nowrap\">Monthly Payment</label>\n          <input id=\"monthlyPayment\"\n                 type=\"number\"\n                 className=\"form-control\"\n                 min={0}\n                 step={0.01}\n                 ref={node => (monthlyPayment = node)}\n                 required />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"remainingTermMonths\"\n                 className=\"text-nowrap\">Remaining Term <small>(Months)</small></label>\n          <input id=\"remainingTermMonths\"\n                 type=\"number\"\n                 className=\"form-control\"\n                 min={0}\n                 step={0.01}\n                 ref={node => (remainingTermMonths = node)}\n                 required />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"interestRate\"\n                 className=\"text-nowrap\">Interest Rate</label>\n          <input id=\"interestRate\"\n                 type=\"number\"\n                 className=\"form-control\"\n                 min={0}\n                 step={0.01}\n                 ref={node => (interestRate = node)}\n                 required />\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-auto\">\n          <input id=\"isConsolidated\"\n                 defaultChecked={false}\n                 type='checkbox'\n                 ref={node => (isConsolidated = node)}/>\n          <label htmlFor=\"isConsolidated\" className=\"pl-2\">Consolidated</label>\n        </div>\n        <div className=\"col-auto\">\n          <input id=\"isNewDebt\"\n                 defaultChecked={false}\n                 type='checkbox'\n                 ref={node => (isNewDebt = node)}/>\n          <label htmlFor=\"isNewDebt\" className=\"pl-2\">New Debt</label>\n        </div>\n      </div>\n\n      <fieldset>\n        <legend>Clients</legend>\n        <div className=\"row\">\n          {personList.map(person =>\n              <div key={person.id}\n                   className=\"col-auto\">\n                <input id={'isClient'+person.id}\n                       defaultChecked={false}\n                       type='checkbox'\n                       ref={node => (clients[person.id] = {node: node, id: person.id})}/>\n                <label htmlFor={'isClient'+person.id} className=\"pl-2\">{person.name}</label>\n              </div>\n          )}\n        </div>\n      </fieldset>\n      <button className=\"btn btn-primary\" type=\"submit\">Add Debt</button>\n    </form>\n)\n\nDebtFormComponent.propTypes = {\n  addDebt: PropTypes.func.isRequired\n}\n\nexport default DebtFormComponent","export const PersonEvents = {\n  ADD_PERSON: 'ADD_PERSON',\n  UPDATE_PERSON_BORROWER: 'UPDATE_PERSON_BORROWER',\n  DELETE_PERSON: 'DELETE_PERSON',\n}","import {PersonEvents} from \"./person.constants\";\n\nconst personReducer = (state = [], action) => {\n  switch (action.type) {\n\n    case PersonEvents.ADD_PERSON:\n      return [...state, action.payload]\n\n    case PersonEvents.DELETE_PERSON:\n      return [...state.filter(person => person.id !== action.id)];\n\n    case PersonEvents.UPDATE_PERSON_BORROWER:\n      return state.map(\n          person =>\n              person.id === action.personBorrower.id\n                  ? Object.assign({}, person, {isBorrower: action.personBorrower.isBorrower})\n                  : person\n      )\n\n    default:\n      return state\n  }\n}\n\nexport default personReducer","export const DebtEvents = {\n  ADD_DEBT: 'ADD_DEBT',\n  DELETE_DEBT: 'DELETE_DEBT',\n  UPDATE_IS_CONSOLIDATED: 'UPDATE_IS_CONSOLIDATED',\n  UPDATE_IS_NEW_DEBT: 'UPDATE_IS_NEW_DEBT',\n  UPDATE_CLIENT: 'UPDATE_CLIENT'\n}\n\nexport const DebtTypes = {\n  AUTO: 'AUTO',\n  HOME: 'HOME',\n  INVESTMENT: 'INVESTMENT',\n  INVESTMENT_PROPERTY: 'INVESTMENT_PROPERTY',\n  UNSECURED: 'UNSECURED',\n  OTHER: 'OTHER',\n}","import {DebtEvents} from \"./debt.constants\";\nimport {PersonEvents} from \"../person/person.constants\";\n\nconst debtClientReducer = (state = [], action) => {\n  switch (action.type) {\n\n    case DebtEvents.UPDATE_CLIENT:\n      return action.debtClient.isClient\n          ? [...state.filter(c => c !== action.debtClient.personId), action.debtClient.personId]\n          : state.filter(c => c !== action.debtClient.personId)\n\n    case PersonEvents.DELETE_PERSON:\n      return state.filter(c => c !== action.id)\n\n    default:\n      return state\n  }\n}\n\nexport default debtClientReducer","import {DebtEvents} from \"./debt.constants\";\nimport debtClientReducer from \"./debt-client.reducer\";\nimport {PersonEvents} from \"../person/person.constants\";\n\nconst debtReducer = (state = [], action) => {\n  switch (action.type) {\n\n    case DebtEvents.ADD_DEBT:\n      return [...state, action.debt]\n\n    case DebtEvents.DELETE_DEBT:\n      return [...state.filter(debt => debt.id !== action.id)]\n\n    case DebtEvents.UPDATE_IS_CONSOLIDATED:\n      return state.map(\n          debt =>\n              debt.id === action.debtConsolidated.id\n                  ? Object.assign({}, debt, {isConsolidated: action.debtConsolidated.isConsolidated})\n                  : debt\n      )\n\n    case DebtEvents.UPDATE_IS_NEW_DEBT:\n      return state.map(\n          debt =>\n              debt.id === action.debtIsNew.id\n                  ? Object.assign({}, debt, {isNewDebt: action.debtIsNew.isNewDebt})\n                  : debt\n      )\n\n    case DebtEvents.UPDATE_CLIENT:\n      return state.map(\n          debt =>\n              debt.id === action.debtClient.debtId\n                  ? Object.assign({}, debt, {clients: debtClientReducer(debt.clients, action)})\n                  : debt\n      )\n\n    case PersonEvents.DELETE_PERSON:\n      return state.map(\n          debt => Object.assign({}, debt, {clients: debtClientReducer(debt.clients, action)})\n      )\n\n    default:\n      return state\n  }\n}\n\nexport default debtReducer","import { combineReducers } from 'redux'\nimport personReducer from './person/person.reducer'\nimport debtReducer from './debt/debt.reducer'\n\n\nexport default combineReducers({\n  personList: personReducer,\n  debtList: debtReducer\n})","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst PrintState = ({ state }) => (\n    <div className=\"row mb-3\">\n      <div className=\"col-auto\">\n        <button className=\"btn btn-outline-warning\"\n                onClick={() => console.log(state)}>Log Redux State</button>\n      </div>\n    </div>\n)\n\nPrintState.propTypes = {\n  state: PropTypes.any.isRequired,\n}\n\nexport default PrintState","import {PersonEvents} from \"./person.constants\";\n\nlet nextPersonId = 0\nexport const addPerson = person => {\n  person.id = nextPersonId++\n  return {\n    type: PersonEvents.ADD_PERSON,\n    payload: person\n  }\n}\n\nexport const deletePerson = id => ({\n  type: PersonEvents.DELETE_PERSON,\n  id\n})\n\nexport const updatePersonBorrower = personBorrower => ({\n  type: PersonEvents.UPDATE_PERSON_BORROWER,\n  personBorrower\n})","import { connect } from 'react-redux'\nimport PrintState from \"./print-state.component\";\n\nconst mapStateToProps = state => ({\n  state: state\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PrintState)","import { connect } from 'react-redux'\nimport {addPerson} from '../../redux/person/person.actions'\nimport PersonFormComponent from \"./person-form.component\";\n\nconst mapStateToProps = state => ({\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onAddPerson: person => dispatch(addPerson(person))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PersonFormComponent)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst BorrowerCheckComponent = ({ id, isBorrower, updatePersonBorrower }) => (\n  <div>\n    <input type=\"checkbox\"\n         id={'isBorrowerCheck'+id}\n         defaultChecked={isBorrower}\n         onChange={ event => {\n           updatePersonBorrower({\n               id: id,\n               isBorrower: event.target.checked\n           });\n         }}/>\n    {/*<label for={'isBorrowerCheck'+id}>{String(isBorrower)}</label>*/}\n  </div>\n)\n\nBorrowerCheckComponent.propTypes = {\n  id: PropTypes.number.isRequired,\n  isBorrower: PropTypes.bool.isRequired,\n  updatePersonBorrower: PropTypes.func.isRequired,\n}\n\nexport default BorrowerCheckComponent","import React from 'react'\nimport PropTypes from 'prop-types'\nimport NumberFormat from 'react-number-format';\nimport BorrowerCheckComponent from \"./borrower-check.component\";\n\nconst PersonTableRowComponent = ({ person, onDelete, updatePersonBorrower }) => (\n    <tr>\n      <td className=\"text-left\">{person.name}</td>\n      <td className=\"text-right\"><NumberFormat value={person.annualIncome} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\n      <td className=\"text-center\">\n        <BorrowerCheckComponent isBorrower={person.isBorrower}\n                                id={person.id}\n                                updatePersonBorrower={updatePersonBorrower}/>\n      </td>\n      <td className=\"text-center\">\n        <button className=\"btn btn-sm btn-danger\"\n                onClick={onDelete}>\n          Delete\n        </button>\n      </td>\n    </tr>\n)\n\nPersonTableRowComponent.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    annualIncome:  PropTypes.number.isRequired,\n    isBorrower: PropTypes.bool.isRequired,\n  }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  updatePersonBorrower: PropTypes.func.isRequired,\n}\n\nexport default PersonTableRowComponent","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PersonTableRowComponent from './person-table-row.component';\n\nconst PersonTable = ({ personList, deletePerson, updatePersonBorrower }) => (\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          <th className=\"text-left\">Name</th>\n          <th className=\"text-right\">Annual Income</th>\n          <th className=\"text-center\">Is Borrower</th>\n          <th className=\"text-center\">Remove</th>\n        </tr>\n      </thead>\n      <tbody>\n        {personList.map(person => (\n            <PersonTableRowComponent key={person.id}\n                                     person={person}\n                                     onDelete={() => deletePerson(person.id)}\n                                     updatePersonBorrower={updatePersonBorrower}\n            />\n        ))}\n      </tbody>\n    </table>\n)\n\nPersonTable.propTypes = {\n  personList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        annualIncome:  PropTypes.number.isRequired,\n        isBorrower: PropTypes.bool.isRequired,\n      }).isRequired\n  ).isRequired,\n  deletePerson: PropTypes.func.isRequired,\n  updatePersonBorrower: PropTypes.func.isRequired,\n}\n\nexport default PersonTable","import { connect } from 'react-redux'\nimport PersonTable from \"./person-table.component\";\nimport {deletePerson, updatePersonBorrower} from \"../../redux/person/person.actions\";\n\nconst mapStateToProps = state => ({\n  personList: state.personList\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deletePerson: id => dispatch(deletePerson(id)),\n  updatePersonBorrower: personBorrower => dispatch(updatePersonBorrower(personBorrower))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PersonTable)","import {DebtEvents} from \"./debt.constants\";\n\nlet nextDebt = 0\nexport const addDebt = (debt) => {\n  debt.id = nextDebt++\n  return {\n    type: DebtEvents.ADD_DEBT,\n    debt\n  }\n}\n\nexport const deleteDebt = id => ({\n  type: DebtEvents.DELETE_DEBT,\n  id\n})\n\nexport const updateIsConcolidated = debtConsolidated => ({\n  type: DebtEvents.UPDATE_IS_CONSOLIDATED,\n  debtConsolidated\n})\n\nexport const updateIsNewDebt = debtIsNew => ({\n  type: DebtEvents.UPDATE_IS_NEW_DEBT,\n  debtIsNew\n})\n\nexport const updateClient = debtClient => ({\n  type: DebtEvents.UPDATE_CLIENT,\n  debtClient\n})","import { connect } from 'react-redux'\nimport {addDebt} from \"../../redux/debt/debt.actions\";\nimport DebtFormComponent from \"./debt-form.component\";\n\nconst mapStateToProps = state => ({\n  personList: state.personList,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  addDebt: debt => dispatch(addDebt(debt)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(DebtFormComponent)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ConsolidatedCheckComponent = ({ id, isConsolidated, updateIsConsolidated }) => (\n  <div>\n    <input type=\"checkbox\"\n         id={'isConsolidated'+id}\n         defaultChecked={isConsolidated}\n         onChange={ event => {\n           updateIsConsolidated({\n               id: id,\n               isConsolidated: event.target.checked\n           });\n         }}/>\n  </div>\n)\n\nConsolidatedCheckComponent.propTypes = {\n  id: PropTypes.number.isRequired,\n  isConsolidated: PropTypes.bool.isRequired,\n  updateIsConsolidated: PropTypes.func.isRequired,\n}\n\nexport default ConsolidatedCheckComponent","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst NewDebtCheckComponent = ({ id, isNewDebt, updateIsNewDebt }) => (\n  <div>\n    <input type=\"checkbox\"\n         id={'isNewDebt'+id}\n         defaultChecked={isNewDebt}\n         onChange={ event => {\n           updateIsNewDebt({\n               id: id,\n               isNewDebt: event.target.checked\n           });\n         }}/>\n  </div>\n)\n\nNewDebtCheckComponent.propTypes = {\n  id: PropTypes.number.isRequired,\n  isNewDebt: PropTypes.bool.isRequired,\n  updateIsNewDebt: PropTypes.func.isRequired,\n}\n\nexport default NewDebtCheckComponent","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nconst ClientCheckComponent = ({ debt, person, updateClient }) => (\n    <div>\n      <input type=\"checkbox\"\n             id={'clientDebt'+debt.id+'person'+person.id}\n             defaultChecked={debt.clients.indexOf(person.id) >= 0}\n             onChange={ event => {\n               updateClient({\n                 debtId: debt.id,\n                 personId: person.id,\n                 isClient: event.target.checked\n               });\n             }}/>\n      <label className=\"pl-1\" htmlFor={'clientDebt'+debt.id+'person'+person.id}>{person.name}</label>\n    </div>\n)\n\nClientCheckComponent.propTypes = {\n  debt: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    clients: PropTypes.arrayOf(PropTypes.number.isRequired)\n  }).isRequired,\n  person: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n  updateClient: PropTypes.func.isRequired,\n}\n\nexport default ClientCheckComponent","import React from 'react'\nimport PropTypes from 'prop-types'\nimport NumberFormat from 'react-number-format';\nimport ConsolidatedCheckComponent from \"./is-consolidated-check.component\";\nimport NewDebtCheckComponent from \"./is-new-debt-check.component\";\nimport ClientCheckComponent from \"./is-client-check.component\";\n\nconst DebtTableRowComponent = ({ debt, personList, onDelete, updateIsConsolidated, updateIsNewDebt, updateClient }) => (\n    <tr>\n      <td className=\"text-left\">{debt.debtType}</td>\n      <td className=\"text-right\">\n        <NumberFormat value={debt.totalValue}\n                      displayType={'text'}\n                      thousandSeparator={true}\n                      prefix={'$'} />\n      </td>\n      <td className=\"text-right\">\n        <NumberFormat value={debt.amountOwed}\n                      displayType={'text'}\n                      thousandSeparator={true}\n                      prefix={'$'} />\n      </td>\n      <td className=\"text-right\">\n        <NumberFormat value={debt.monthlyPayment}\n                      displayType={'text'}\n                      thousandSeparator={true}\n                      prefix={'$'} />\n      </td>\n      <td className=\"text-right\">\n        {debt.remainingTermMonths}\n      </td>\n      <td className=\"text-right\">\n        {debt.interestRate}\n      </td>\n      <td className=\"text-center\">\n        <ConsolidatedCheckComponent id={debt.id}\n                                    isConsolidated={debt.isConsolidated}\n                                    updateIsConsolidated={updateIsConsolidated}/>\n      </td>\n      <td className=\"text-center\">\n        <NewDebtCheckComponent id={debt.id}\n                               isNewDebt={debt.isNewDebt}\n                               updateIsNewDebt={updateIsNewDebt} />\n      </td>\n      <td>\n        {personList.map(person => (\n          <div key={debt.id+'=>'+person.id} className=\"text-nowrap\">\n            <ClientCheckComponent debt={debt}\n                                  person={person}\n                                  updateClient={updateClient}/>\n          </div>\n        ))}\n      </td>\n      <td className=\"text-center\">\n        <button className=\"btn btn-sm btn-danger\"\n                onClick={onDelete}>\n          Delete\n        </button>\n      </td>\n    </tr>\n)\n\nDebtTableRowComponent.propTypes = {\n  debt: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        debtType: PropTypes.string.isRequired,\n        totalValue:  PropTypes.number.isRequired,\n        amountOwed:  PropTypes.number.isRequired,\n        interestRate:  PropTypes.number.isRequired,\n        monthlyPayment:  PropTypes.number.isRequired,\n        remainingTermMonths:  PropTypes.number.isRequired,\n        isConsolidated: PropTypes.bool.isRequired,\n        isNewDebt: PropTypes.bool.isRequired,\n        clients: PropTypes.arrayOf(PropTypes.number.isRequired)\n      }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  updateIsConsolidated: PropTypes.func.isRequired,\n  updateIsNewDebt: PropTypes.func.isRequired,\n  updateClient: PropTypes.func.isRequired,\n}\n\nexport default DebtTableRowComponent","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DebtTableRowComponent from \"./debt-table-row.component\";\n\nconst DebtTableComponent = ({ debtList, personList, deleteDebt, updateIsConsolidated, updateIsNewDebt, updateClient }) => (\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          <th className=\"text-left\">Type</th>\n          <th className=\"text-right\">Total Value</th>\n          <th className=\"text-right\">Amount Owed</th>\n          <th className=\"text-right\">Monthly Payment</th>\n          <th className=\"text-right\">Remaining Term <small>(Months)</small></th>\n          <th className=\"text-right\">Interest Rate</th>\n          <th>Consolidated</th>\n          <th>New Debt</th>\n          <th>Clients</th>\n          <th className=\"text-center\">Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {debtList.map(debt => (\n            <DebtTableRowComponent key={debt.id}\n                                   debt={debt}\n                                   personList={personList}\n                                   onDelete={() => deleteDebt(debt.id)}\n                                   updateIsConsolidated={updateIsConsolidated}\n                                   updateIsNewDebt={updateIsNewDebt}\n                                   updateClient={updateClient}/>\n        ))}\n\n      </tbody>\n    </table>\n)\n\nDebtTableComponent.propTypes = {\n  debtList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        debtType: PropTypes.string.isRequired,\n        totalValue:  PropTypes.number.isRequired,\n        amountOwed:  PropTypes.number.isRequired,\n        interestRate:  PropTypes.number.isRequired,\n        monthlyPayment:  PropTypes.number.isRequired,\n        remainingTermMonths:  PropTypes.number.isRequired,\n        isConsolidated: PropTypes.bool.isRequired,\n        isNewDebt: PropTypes.bool.isRequired,\n        clients: PropTypes.arrayOf(PropTypes.number.isRequired)\n      }).isRequired\n  ).isRequired,\n  deleteDebt: PropTypes.func.isRequired,\n  updateIsConsolidated: PropTypes.func.isRequired,\n  updateIsNewDebt: PropTypes.func.isRequired,\n  updateClient: PropTypes.func.isRequired,\n}\n\nexport default DebtTableComponent\n","import connect from \"react-redux/es/connect/connect\";\nimport DebtTableComponent from \"./debt-table.component\";\nimport {deleteDebt, updateClient, updateIsConcolidated, updateIsNewDebt} from \"../../redux/debt/debt.actions\";\n\nconst mapStateToProps = state => ({\n  debtList: state.debtList,\n  personList: state.personList\n})\n\nconst mapDispatchToProps = dispatch => ({\n  deleteDebt: id => dispatch(deleteDebt(id)),\n  updateIsConsolidated: debtConsolidated => dispatch(updateIsConcolidated(debtConsolidated)),\n  updateIsNewDebt: debtIsNew => dispatch(updateIsNewDebt(debtIsNew)),\n  updateClient: debtClient => dispatch(updateClient(debtClient)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(DebtTableComponent)","import React from 'react'\nimport AddPerson from \"./person/person-form.container\";\nimport PersonList from \"./person/person-table.container\";\nimport AddDebt from \"./debt/debt-form.container\";\nimport DebtTable from \"./debt/debt-table.container\";\n\nconst getDisabled = (personList, debtList) => {\n  return personList.length > 0 && debtList.length > 0\n    ? \"\"\n    : \"disabled\"\n}\n\n\nconst TabsComponent = ({ personList, debtList }) => (\n    <div>\n      <nav>\n        <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n          <a className=\"nav-item nav-link active\" id=\"nav-person-tab\" data-toggle=\"tab\" href=\"#nav-person-list\" role=\"tab\" aria-controls=\"nav-person-list\" aria-selected=\"true\">Clients</a>\n          <a className=\"nav-item nav-link\" id=\"nav-debt-tab\" data-toggle=\"tab\" href=\"#nav-debt-list\" role=\"tab\" aria-controls=\"nav-debt-list\" aria-selected=\"false\">Debts</a>\n          <a className={\"nav-item nav-link \"+getDisabled(personList, debtList)} id=\"nav-result-tab\" data-toggle=\"tab\" href=\"#nav-result-list\" role=\"tab\" aria-controls=\"nav-result-list\" aria-selected=\"false\">Results</a>\n        </div>\n      </nav>\n      <div className=\"tab-content\" id=\"nav-tabContent\">\n        <div className=\"tab-pane fade show active\" id=\"nav-person-list\" role=\"tabpanel\" aria-labelledby=\"nav-home-tab\">\n          <h2>Clients</h2>\n          <AddPerson />\n          <div className=\"mt-3\">\n            <PersonList />\n          </div>\n        </div>\n        <div className=\"tab-pane fade\" id=\"nav-debt-list\" role=\"tabpanel\" aria-labelledby=\"nav-profile-tab\">\n          <h2>Debts</h2>\n          <AddDebt />\n          <div className=\"mt-3\">\n            <DebtTable />\n          </div>\n        </div>\n        <div className=\"tab-pane fade\" id=\"nav-result-list\" role=\"tabpanel\" aria-labelledby=\"nav-contact-tab\">\n          <h2>Results</h2>\n        </div>\n      </div>\n    </div>\n)\n\nexport default TabsComponent","import { connect } from 'react-redux'\nimport TabsComponent from \"./tabs.component\";\n\nconst mapStateToProps = state => ({\n  personList: state.personList,\n  debtList: state.debtList\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TabsComponent)","import React from 'react'\nimport PrintState from \"./debug/print-state.container\";\nimport Tabs from \"./tabs.container\";\n\nconst App = () => (\n    <div className=\"container\">\n\n      <h1>Re-fi Calculator</h1>\n\n      <Tabs />\n\n      {/*<PrintState />*/}\n    </div>\n)\n\nexport default App","import {addPerson} from \"./redux/person/person.actions\";\nimport {addDebt} from \"./redux/debt/debt.actions\";\nimport {DebtTypes} from \"./redux/debt/debt.constants\";\n\nconst loadData = (store) => {\nreturn;\n\n  // loading people\n  store.dispatch(addPerson({name:'Jack Johnson', annualIncome:88000, isBorrower:true}))\n  store.dispatch(addPerson({name:'Jill Johnson', annualIncome:98000, isBorrower:true}))\n  store.dispatch(addPerson({name:'Tom Jones', annualIncome:103000, isBorrower:false}))\n\n  // loading debts\n  store.dispatch(addDebt({\n    debtType: DebtTypes.HOME,\n    totalValue: 100000,\n    amountOwed: 800000,\n    monthlyPayment: 400,\n    interestRate: 5,\n    remainingTermMonths: 300,\n    isConsolidated: false,\n    isNewDebt: true,\n    clients:[0,1]\n  }))\n  store.dispatch(addDebt({\n    debtType: DebtTypes.AUTO,\n    totalValue: 35000,\n    amountOwed: 10000,\n    monthlyPayment: 200,\n    interestRate: 6,\n    remainingTermMonths: 30,\n    isConsolidated: true,\n    isNewDebt: false,\n    clients:[1]\n  }))\n\n}\n\nexport default loadData","import 'bootstrap/dist/css/bootstrap.min.css';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './redux/index.reducer'\nimport App from './react/App'\nimport loadData from \"./load-test-data\";\n\nconst store = createStore(rootReducer);\n\nloadData(store);\n\nrender(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}